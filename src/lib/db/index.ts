import { DATABASE_HOST, DATABASE_USERNAME, DATABASE_PASSWORD } from "$env/static/private";
//import { drizzle } from 'drizzle-orm/planetscale-serverless';
//import { connect } from '@planetscale/database';
import {Kysely, type ColumnType, type Generated} from 'kysely';
import {PlanetScaleDialect} from 'kysely-planetscale';

const config = {
    host: DATABASE_HOST,
    username: DATABASE_USERNAME,
    password: DATABASE_PASSWORD
}

interface PersonTable {
    // Columns that are generated by the database should be marked
    // using the `Generated` type. This way they are automatically
    // made optional in inserts and updates.
    id: Generated<number>
  
    first_name: string
    gender: 'male' | 'female' | 'other'
  
    // If the column is nullable in the database, make its type nullable.
    // Don't use optional properties. Optionality is always determined
    // automatically by Kysely.
    last_name: string | null
  
    // You can specify a different type for each operation (select, insert and
    // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
    // wrapper. Here we define a column `modified_at` that is selected as
    // a `Date`, can optionally be provided as a `string` in inserts and
    // can never be updated:
    modified_at: ColumnType<Date, string | undefined, never>
  }
  
  interface PetTable {
    id: Generated<number>
    name: string
    owner_id: number
    species: 'dog' | 'cat'
  }
  
  interface MovieTable {
    id: Generated<string>
    stars: number
  }
  
  // Keys of this interface are table names.
  interface Database {
    person: PersonTable
    pet: PetTable
    movie: MovieTable
  }

//const connection = connect(config);
//export const db = drizzle(connection);
export const db = new Kysely<Database>({
    dialect: new PlanetScaleDialect(config),
})